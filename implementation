#include <bits/stdc++.h>
using namespace std;

// NRZ-L
vector<int> nrzl(const string &bits) {
    vector<int> levels;
    for (char b : bits) levels.push_back(b == '1' ? 1 : -1);
    return levels;
}

// NRZ-I
vector<int> nrzi(const string &bits) {
    vector<int> levels;
    int last = -1;
    for (char b : bits) {
        if (b == '1') last = -last; // toggle
        levels.push_back(last);
    }
    return levels;
}

// Manchester:
vector<int> manchester(const string &bits) {
    vector<int> levels;
    for (char b : bits) {
        if (b == '1') { levels.push_back(1); levels.push_back(-1); }
        else          { levels.push_back(-1); levels.push_back(1); }
    }
    return levels;
}

// Differential Manchester
vector<int> diffManchester(const string &bits) {
    vector<int> levels;
    int start = 1;
    for (char b : bits) {
        if (b == '0') start = -start;  // transition at start for 0
        levels.push_back(start);
        levels.push_back(-start);       // always mid-bit transition
        start = -start;
    }
    return levels;
}

// AMI
vector<int> ami(const string &bits) {
    vector<int> levels;
    int last = -1;
    for (char b : bits) {
        if (b == '1') {
            last = -last;
            levels.push_back(last);
        } else levels.push_back(0);
    }
    return levels;
}

// Scrambling B8ZS
string b8zs(const string &bits) {
    string s = bits;
    for (size_t i = 0; i + 8 <= s.size(); ++i) {
        if (s.substr(i, 8) == "00000000") s.replace(i, 8, "000VB0VB");
    }
    return s;
}

// Scrambling HDB3
string hdb3(const string &bits) {
    string s = bits;
    int count = 0;
    for (size_t i = 0; i + 4 <= s.size(); ++i) {
        if (s.substr(i, 4) == "0000") {
            if (count % 2 == 0) s.replace(i, 4, "000V");
            else s.replace(i, 4, "B00V");
            count = 0;
            i += 3;
        } else if (s[i] == '1') count++;
    }
    return s;
}

// PCM 
string pcmEncode(const vector<double> &samples, int bits=4) {
    int L = 1 << bits;
    string bitstream;
    for (double s : samples) {
        int level = (int)round((s + 1) / 2 * (L - 1)); // normalize [-1,1]
        for (int b = bits-1; b >= 0; --b)
            bitstream.push_back(((level >> b) & 1) ? '1' : '0');
    }
    return bitstream;
}

// Delta Modulation
string deltaModulation(const vector<double> &samples, double step=0.2) {
    string bits;
    double approx = 0;
    for (double s : samples) {
        if (s >= approx) {
            bits.push_back('1');
            approx += step;
        } else {
            bits.push_back('0');
            approx -= step;
        }
    }
    return bits;
}

int main() {
    cout << "Digital Signal Generator\n";
    cout << "1. Digital Input\n2. Analog Input\n";
    int choice;
    cout << "Enter your choice: ";
    cin >> choice;
    \\ for digital input
    if (choice == 1) {
        string bits;
        cout << "Enter digital bitstream (0s and 1s): ";
        cin >> bits;

        cout << "\nSelect Line Encoding:\n";
        cout << "1. NRZ-L\n2. NRZ-I\n3. Manchester\n4. Differential Manchester\n5. AMI\n";
        int enc; cin >> enc;

        vector<int> levels;
        if (enc == 1) levels = nrzl(bits);
        else if (enc == 2) levels = nrzi(bits);
        else if (enc == 3) levels = manchester(bits);
        else if (enc == 4) levels = diffManchester(bits);
        else if (enc == 5) {
            cout << "Scrambling needed? (y/n): ";
            char ans; cin >> ans;
            if (ans == 'y' || ans == 'Y') {
                cout << "Select scrambling: 1. B8ZS  2. HDB3: ";
                int s; cin >> s;
                if (s == 1) bits = b8zs(bits);
                else if (s == 2) bits = hdb3(bits);
            }
            levels = ami(bits);
        }

        cout << "\nEncoded Levels:\n";
        for (int v : levels) cout << v << " ";
        cout << "\n";
    } 

    \\for analog input
    else if (choice == 2) {
        int n;
        cout << "Enter number of samples: ";
        cin >> n;

        vector<double> samples(n);
        cout << "Enter analog samples (between -1 and +1):\n";
        for (int i = 0; i < n; ++i) cin >> samples[i];

        cout << "Select Modulation:\n1. PCM\n2. Delta Modulation\n";
        int mod; cin >> mod;
        string bitstream;

        if (mod == 1) bitstream = pcmEncode(samples);
        else bitstream = deltaModulation(samples);

        cout << "Generated Digital Bitstream:\n" << bitstream << "\n";

        cout << "\nNow choose line encoding for generated bitstream:\n";
        cout << "1. NRZ-L\n2. NRZ-I\n3. Manchester\n4. Differential Manchester\n5. AMI\n";
        int enc; cin >> enc;

        vector<int> levels;
        if (enc == 1) levels = nrzl(bitstream);
        else if (enc == 2) levels = nrzi(bitstream);
        else if (enc == 3) levels = manchester(bitstream);
        else if (enc == 4) levels = diffManchester(bitstream);
        else if (enc == 5) levels = ami(bitstream);

        cout << "\nEncoded Levels:\n";
        for (int v : levels) cout << v << " ";
        cout << "\n";

    } else {
        cout << "Invalid choice.\n";
    }

    return 0;
}
